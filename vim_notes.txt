Moving:
- 6j: Jump 6 line
- gg: first line of the doc
- G : last line of the doc
- 15G : go to line 15
- 0 : start of line
- $ : end of line
- ^ : first non blank character
- CTRL-U : half page up
- CTRL-D : half page down
- CTRL-F : page down
- CRTL-B : page up
- goto line: `:n`
- move between functions in normal mode: [[ e ]] (poi % per la parentesi corrispondente)

Editing:
- r : replace
- cw: change word
- cc: change line
- s : delete and substitute char
- u : undo
- CRTL-r : redo
- . : repeat last command
- e: edit (reload he buffer from file)

Search and replace:
:[range]s/{pattern}/{string}/[flags] [count]
e.g.:
%s/foo/bar/g  -> replace in all file
%s/foo/bar/gc  -> replace with confirm

Removing all lines containing `console`
:g/profile/d

Insert:
- i : insert before the cursor
- I : insert beginning of the line
- a : append after the cursor
- A : append end of the line
- o : line below the cursor
- O line above the cursos

Cut And paste:
- yy: yank a line
- y$: to eol
- yw: yank to the start of next word
- yaw: yank all word
- daw: delete all word
- p : put after the cursor
- P : put before the cursor
- reg: see the register
- "xp: copy from reg "x
In insert mode it's possible to use CRTL-o to execute a single normal mode
So, for instance: CRTL-o p

Delete:
- dd
- d$
- dG
- x

Search:
- /pattern
- ?pattern
- n : search forward
- N : sarch backward
- % : matching parenthesis
- * : search current word forward
- # : search current word backward

Visual Block Mode: CRTL-V

Example: comment a set of lines
- switch to visual block (CTRL-V) , then mark the lines
- enter insert mode (e.g. I to insert at the beginning on the line) and add the comment char, e.g.: //
- pressing ESC will apply the same to all the block

Buffers (in command mode):
- ls
- b1: switch to buffer 1
- bd: close current buffer.
- b (space) + TAB + autocomplete for the current buffers

Inner obects:
- i + object    Inner text object
- a + object    Outer text object
Example: di{ removes all that it's inside current {}
more supported objects:
  - w         A word
  - p         A paragraph
  - s         A sentence
  - ( or )    A pair of ( )
  - { or }    A pair of { }
  - [ or ]    A pair of [ ]
  - < or >    A pair of < >
  - t         XML tags
  - "         A pair of " "
  - '         A Pair of ' '
  - `         A pair of ` `

 Mark positions:
 In normal mode: ma (or b, c, etc)
 jump: 'a
 If you use uppercase, marks are global. 
To see all marks  (defaults included): `'` or  `:marks`

 Dot command:
 Repeat the last change.
 Es: if you want to replace all let wit const:
 - /let
 - cwconst<esc> // effettua il change sul primo risultato
 - n (to select the next let)
 - . , etc

Move lines:
- super + alt + j/k

Macro:
- Start recording macro with `qa` (for the `a` macro)
- Execute the actions
- End with `q` 
- Execute the macro with `@a`

Comments:
- Using commentary plugin, `gcc` toggles, `gc` in visual mode

